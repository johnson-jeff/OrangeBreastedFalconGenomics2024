################################
########### PCA.PLINK ###########
################################


### PCAs were generated using PLINK 1.9 and graphically generated using R

### PCA using PLINK 1.9 

VCF_DIR = LOC_OF_FILTERED_VCF 
IN = NAME_OF_FILTERED_VCF  # Chr1-21 only and no Outgroup

# generate files for PCA
plink --vcf $VCF_DIR/$IN.vcf.gz --double-id --allow-extra-chr --set-missing-var-ids @:# --make-bed --pca --out Chr1-21.allSamples_noOutgroup


### OBF-only PCA 

IN_OBF = NAME_OF_FILTERED_VCF  # Chr1-21 OBF-only and no Outgroup

#generate files for PCA
plink --vcf $VCF_DIR/$IN_OBF.vcf.gz --double-id --allow-extra-chr --set-missing-var-ids @:# --make-bed --pca --out Chr1-21.OBF-only_noOutgroup


### BF-only PCA 

IN_BF = NAME_OF_FILTERED_VCF  # Chr1-21 BF-only and no Outgroup

## generate files for PCA
plink --vcf $VCF_DIR/$IN_BF.vcf.gz --double-id --allow-extra-chr --set-missing-var-ids @:# --make-bed --pca --out Chr1-21.BF-only_noOutgroup


## above generates several files that will be used to generate PCA using R package tidyverse

################################
############# PCA.R ###########
################################

# load tidyverse package
library(tidyverse)

# make sure *.eigenval and *.eigenval files generated with Plink above are in working directory
# modify accordingly to accommodate 

# read in data
pca <- read_table("Chr1-21.allSamples_noOutgroup.eigenvec", col_names = FALSE)
eigenval <- scan("Chr1-21.allSamples_noOutgroup.eigenval")

#pca <- read_table("Chr1-21.OBFonly.eigenvec", col_names = FALSE)  # use with OBF-only PCA 
#eigenval <- scan("Chr1-21.OBFonly.eigenval")  # use with OBF-only PCA

#pca <- read_table("Chr1-21.BFonly.eigenvec", col_names = FALSE)  # use with BF-only PCA
#eigenval <- scan("Chr1-21.BFonly.eigenval")  # use with BF-only PCA


# sort out the pca data
# remove nuisance column
pca <- pca[,-1]
# set names
names(pca)[1] <- "ind"
names(pca)[2:ncol(pca)] <- paste0("PC", 1:(ncol(pca)-1))

# sort out the individual species and pops
# spp
spp <- rep(NA, length(pca$ind))
spp[grep("Fd", pca$ind)] <- "Orange-breasted Falcon"
spp[grep("Fr", pca$ind)] <- "Bat Falcon"
# location
loc <- rep(NA, length(pca$ind))
loc[grep("Belize", pca$ind)] <- "loc1"
loc[grep("Guatemala", pca$ind)] <- "loc1"
loc[grep("CostaRica", pca$ind)] <- "loc2"
loc[grep("Panama", pca$ind)] <- "loc2"
loc[grep("Ecuador", pca$ind)] <- "loc3"
loc[grep("Surinam", pca$ind)] <- "loc3"
loc[grep("Guyana", pca$ind)] <- "loc3"
loc[grep("Bolivia", pca$ind)] <- "loc4"
loc[grep("Peru", pca$ind)] <- "loc4"
loc[grep("Brazil", pca$ind)] <- "loc4"
loc[grep("Paraguay", pca$ind)] <- "loc5"

loc[grep("Panama-Belize", pca$ind)] <- "captive"

# combine - if you want to plot each in different colours
spp_loc <- paste0(spp, "_", loc)

# remake data.frame
pca <- as_tibble(data.frame(pca, spp, loc, spp_loc))

# first convert to percentage variance explained
pve <- data.frame(PC = 1:21, pve = eigenval/sum(eigenval)*100)
#pve <- data.frame(PC = 1:12, pve = eigenval/sum(eigenval)*100)  # use with OBF-only PCA
#pve <- data.frame(PC = 1:9, pve = eigenval/sum(eigenval)*100)  # use with BF-only PCA


# make plot
a <- ggplot(pve, aes(PC, pve)) + geom_bar(stat = "identity")
a + ylab("Percentage variance explained") + theme_light()

# calculate the cumulative sum of the percentage variance explained
cumsum(pve$pve)

# plot pca
b <- ggplot(pca, aes(PC1, PC2, col = loc, shape = spp)) + geom_point(size = 10)
b <- b + scale_colour_manual(values = c("purple", "dodgerblue3", "skyblue2", "orange", "coral", "red"))
b <- b + scale_shape_manual(values = c("circle", "diamond"))
#b <- b + coord_fixed(ratio = 1/2.5)
b + xlab(paste0("PC1 (", signif(pve$pve[1], 3), "%)")) + ylab(paste0("PC2 (", signif(pve$pve[2], 3), "%)")) + 
  theme_light() + 
#  theme(panel.border = element_blank(), panel.grid.major = element_line(color = "gray90"), panel.grid.minor = element_line(color = "gray92"), axis.line = element_line(colour = "black")) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), axis.ticks = element_line(colour = "black")) +
  #xlim(-0.4,0.4) + 
  scale_x_continuous(limits = c(-0.40, 0.30), breaks = seq(-0.50, 0.50, 0.20)) +
  #ylim(-0.80,0.80) +
  scale_y_continuous(limits = c(-0.60, 0.70), breaks = seq(-0.70, 0.70, 0.20)) + 
  geom_vline(xintercept = 0, linetype = 3) +
  geom_hline(yintercept = 0, linetype = 3) +
  theme(axis.text = element_text(size = 18), axis.title = element_text(size = 20))
ggsave(filename = "Chr1to21_allSamples.eps", width = 7, height = 4, dpi = 300)
#ggsave(filename = "Chr1to21_OBF-only.eps", width = 7, height = 4, dpi = 300)   # use with OBF-only PCA 
#ggsave(filename = "Chr1to21_BF-only.eps", width = 7, height = 4, dpi = 300)   # use with BF-only PCA 